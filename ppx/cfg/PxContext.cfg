PxCFG  = 
;---------------------------------------------------------------------------
;・ポップアップメニュー
;/ M_Ccr/ M_Unone/ M_UDir/ M_Uimg*/ M_Udoc/ M_Uarc/
;/ M_Carc/ M_Clist/ M_Chttp/ M_DirMenu*/ M_Cgit/ M_File*/ M_bin/ M_xunpack/ M_xpack/ M_ppvc/ M_editci/ M_editc/
;---------------------------------------------------------------------------
;** Apps共通
;---------------------------------------------------------------------------
-|M_Ccr =
M_Ccr = {
Ext =
マークパス書き出し(&L)  = *script %'scr'%\LFwrite.js,new,%*input("|%1|%\marklist.sz7" -title:"パスの設定" -select:i)
-- =
リネーム(&R)  = ?M_FileRename
コメント  &[  = ?M_menuCTool1
属性(&A)      = %K"@A"
-- =
圧縮(&P)      = ?M_xpack
-- =
移動(&M)      = ?M_FileMOVE
コピー(&C)    = ?M_FileCOPY
削除(&D)      = %"ファイル操作" %Q"選択エントリを削除します"
                *ppcfile !safedelete,%*name(HP,%1)%'trash'%\,/qstart /min /retry:0 /error:0
-- =
サムネイル256(&T)   = %Ons ralpha /ini=thumb256.ini %FD%\%R
                      %Oi *ppc -bootid:T -single -sps -min -k *jumppath %FD -entry:%R
                      *wait 100,1
                      %Oi *execute CT,*setentryimage "c:\bin\temp\thumb.jpg" /save
                      *closeppx CT
                      *delete "c:\bin\temp\thumb.jpg"
サムネイル設定(&T)  = *viewstyle -temp "画像:小(&W)"
                      %On *ppb -c %0ppcw -single -bootid:t -choose:con8 | sed -e s/\\/\\\\/g | xargs -I {} %0ppcw -r -k *setentryimage {} -save
サムネイル削除(&T)  = *if 9==%*js(PPx.Result = PPx.DirectoryType;) %: *delete "%C" %: *stop
                      *delete "%C:thumbnail.jpg"
--  =
プロパティ(&I)  = %K"@&ENTER"
}
;---------------------------------------------------------------------------
;** Apps振り分けなし
;---------------------------------------------------------------------------
-|M_Unone =
M_Unone = {
移動形式 = ??exjumpmenu
-- =
テキスト変換(&X) = ?M_Udoc
}
;---------------------------------------------------------------------------
;** Appsディレクトリ
;---------------------------------------------------------------------------
-|M_Udir =
M_UDir = {
ディレクトリ内検索(&W)  = *where -path:"%#;FC" -listfile:"%'temp'%\ppxresult.xlf"
; テキスト置換(&S)      = %0..\spe5d\Speeeeed.exe %#FDC
--  =
画像変換(&R)  =?M_Uimg1
--  =
;&MassiGra     = viewer /newwnd %FDC
;--  =
}
;---------------------------------------------------------------------------
;** Apps画像
;---------------------------------------------------------------------------
-|M_Uimg =
M_Uimg = {
移動形式        = ??exjumpmenu
-- =
; &AzPaiter       = *AHK AzPainter2.ahk %FDC
; &EDGE           = *AHK EDGE.ahk %FDC
背景に設定(&B)  = *setcust X_bg:P_%n=%FDC
                  *setcust X_bg:T_%n=20
                  *color back
-- =
画像変換(&R)    = ??M_Uimg1
-- =
}
-|M_Uimg1 =
M_Uimg1 = {
; &Ec        = %Oxi %0..\ec150\EC.exe
;              *autodragdrop #%*findwindowclass("TMainForm"),%FDC
&Ralpha     = %Oi *launch %'ralpha'
              *autodragdrop "Ralpha Image Resizer",%FDC
&RalphaCMD  = *string o,inipath=%*name(C,"%*input("c:\bin\ralpha\ini" -title:"設定ファイルの選択" -mode:g -k:%%k"right '\'")")
              ralpha /ini=%so"inipath" %#FDC
}
;---------------------------------------------------------------------------
;** Appsテキスト形式
;---------------------------------------------------------------------------
-|M_Udoc =
M_Udoc = {
文字列置換(&R)  = *if 4==%*js(PPx.Result = PPx.DirectoryType;) %: *script %'scr'%\LFexec.js,sed,1 %: *stop
                  %On *ppb -c sed -i_back -r "s#%*script(%'scr'%\compcode.js,"iX","""%%","[検索文字#置換文字] ※\=\\\\")#g" %#FDC
-- =
文字コード変換: &SJIS(CRLF)    = %On *PPb -c nkf -s -Lw -c -x --no-best-fit-chars --overwrite %#FDC
文字コード変換: &UTF16LE       = %On *PPb -c nkf -w16L -x --no-best-fit-chars --overwrite %#FDC
文字コード変換: UTF&8(LF)      = %On *PPb -c nkf -w -Lu -d --overwrite %#FDC
文字コード変換: UTF8&BOM(LF)   = %On *PPb -c nkf -w8 -Lu -d --overwrite %#FDC
}
;---------------------------------------------------------------------------
;** Apps書庫
;---------------------------------------------------------------------------
-|M_Uarc  =
M_Uarc = {
書庫内検索(&W)  = *where -path:"%R" -vfs -listfile:"%'temp'%\ppxresult.xlf"
-- =
移動形式(&Y)    = ??exjumpmenu
-- =
;&MassiGra       = viewer %FDC
;-- =
解凍(&U)        =?M_Xunpack
}
;---------------------------------------------------------------------------
;** アーカイブ内
;---------------------------------------------------------------------------
-|M_Carc =
M_Carc = {
下層を開く(&O)  = %K"C_DIR"
-- =
ワークスペースに解凍(&U)    = *unpack %'work'
ディレクトリにまとめる(&U)  = *unpack %*RESULT(getpath)UNPACK
-- =
名前の変更(&R)  = %On *ppb -c reces /mn%C:%*input("%*regexp("%FC","s/(.*\\)(.*)/$1|$2|/")" -title:"書庫内ファイル名の変更" -mode:Ec -select:i) %FD %&%K"@^F5" %: *stop
移動(&M)        = *script %'scr'%\cmdMove.js
コピー(&C)      = *script %'scr'%\cmdCopy.js,0
削除(&D)        = %"ファイル操作"%Q"書庫から削除します" %: %u7-zip64.dll,d -hide %FD %@
}
;---------------------------------------------------------------------------
;** リストファイル内
;---------------------------------------------------------------------------
-|M_Clist =
M_Clist = {
該当ディレクトリ(&J)  = *jumppath %FC /entry
-- =
Ext =
リンク切れ抽出(&N)    = *script %'scr'%\markNotExist.js
リストから消去(&D)    = %K"@^\D"
-- =
;リネーム :&Allrename  = %Oi %0..\allrename\allrename.exe /file
;                        %K"null"
;                        *autodragdrop "AllRename"
メモ(&E)  = *MEMO
赤(&R)    = *MEMO 8
緑(&G)    = *MEMO 1
青(&B)    = *MEMO 10
-- =
移動(&M)        = *script %'scr'%\cmdMove.js
コピー(&C)      = *script %'scr'%\cmdCopy.js,1
実体削除(&D)    = %"ファイル操作" %Q"実ファイルを削除します"
                  %Oa *ppcfile !safedelete,%*name(HP,%1)%'trash'%\,/min /qstart /compcmd %K"@^\D"
-- =
マークパス書き出し(&L)  = *script %'scr'%\LFwrite.js,new,%'work'%\marklist.sz7
}
;---------------------------------------------------------------------------
;** HTTP
;---------------------------------------------------------------------------
-|M_Chttp =
; M_Chttp = {
; }
;---------------------------------------------------------------------------
;** ディレクトリメニュー
;---------------------------------------------------------------------------
-|M_DirMenu =
M_DirMenu = {
ディレクトリ検索(&W)  = *where -vfs -listfile:"%'temp'%\ppxresult.xlf"
-- =
エントリ作成(&N)  = ?newmenu
-- =
表示(&V)          = ?viewmenu
ソート(&S)        = ?sortmenu
-- =
ローカル(&L)      = ?drivemenu
-- =
キャッシュON(&E)  = *cache on
                    %K"@F5"
〃        OFF(&E) = *cache off
--  = 
; &DFで開く         = *launch %0..\DF\DF.EXE %DCA -w%DCB
; -- =
背景を解除(&Q)    = *setcust X_bg:P_%n=
                    *customize X_bg:T_%n=
明度調整(&B)      = *string o,title=明るさ [min-max:1-100]
                    *customize X_bg:B_%n=%{%*getcust(X_bg:B_%n)%}
--  =
オプション(&O)    = ?diroptionmenu
プロパティ(&R)    = %z%FVD,properties
}
;---------------------------------------------------------------------------
;** Git
;---------------------------------------------------------------------------
-|M_CgitN  =
M_CgitN = {
&G:git <CMD>  = *string o,cmd=git
                *execute %n,%so"cmd" %*input(-title:"%so"cmd".." -mode:e -k *completelist -file:%'list'%\GITCOMMAND.TXT)
-- =
&O:git-clone <clipbord> <path>  = %"git clone?"%Q"%*clippedtext()" %: git clone %*clippedtext() %*input("" -title:"レポジトリ名" -mode:d -select:l)
&O:gist-clone <clipbord> <path> = *string o,path=%*regexp("%*clippedtext","s/.*?([0-9a-z]{32})(.*)?/git@gist.github.com:$1/")
                                  %"gist clone?"%Q"%so"path"" %: git clone %so"path" %*input("" -title:"レポジトリ名" -mode:d -select:l)
}
-|M_Cgit  =
M_Cgit = {
&G:git <CMD>            = *string o,cmd=git
                          *execute %n,%so"cmd" %*input(-title:"%so"cmd".." -mode:e -k *completelist -file:%'list'%\GITCOMMAND.TXT)
&A:add -v %%#FC         = *string o,fn=%*regexp(%*RESULT(lfnames),"s/[^\s]*\s->\s//g")
                          %Oa git add -v %so"fn" %& *script %'scr'%\gitChangeState.js,1,5
&P:add -p -v %%#FC      = *script %'scr'%\gitChangeState.js,3,17 %: %Oa git add -p -v %#FC %: *focus #%*NT
&U:restore -S %%#FC     = *string o,fn=%*regexp(%*RESULT(lfnames),"s/[^\s]*\s->\s//g")
                          %Oa git restore -S %so"fn" %& *script %'scr'%\gitChangeState.js,0,13
&W:restore -S -W %%#FC  = %"git resotre --staged --worktree"%Q"コミット後の状態に戻します" %: %Oa git restore -S -W %#FC %& *script %'scr'%\gitChangeState.js,0,2
&E:commit PPe           = *string o,ppe=%*findwindowclass(PPeditW)
                          *if 0%so"ppe" %: *focus #%so"ppe" %: *stop
                          *string o,gr=%*extract(%*getcust(_User:g_ppcid)"%%si""gr""")
                          *ifmatch 0,0%so"gr" %: *string o,gr=%'myrepo'
                          *ppe %'list'%\git\commit_template -k *string e,commit=1 %%: *string e,filename=%so"gr"%\.git\COMMIT_EDITMSG
                          *ifmatch !0,0%*extract(C"%%si""oBranch""") %: *script %'scr'%\gitModePos.js,e
&C:commit --amend --no-edit = %Q"直近のコミットを上書きします" %: *run -wait:idle git commit --amend --no-edit %: *wait
                              *execute %n,*jumppath -savelocate %&
                              *ifmatch 0,0%si"oBranch %: *stop
                              node %'myrepo'%\nodejs\ppx\git_getlog.js 1 1 1 status
&R:reset --soft HEAD^   = %Oa git log -n1 %: %Q"直近のコミットを削除します" %: git reset --soft HEAD^ %&
                          *ifmatch !0,0%si"oBranch" %: node %'myrepo'%\nodejs\ppx\git_getlog.js 1 1 1 %si"gm"
-- =
&B:checkout branch      = *run -noppb -pos:360,200 ppbw -c nyagos -c mode 60,20&lua_f "%'myrepo'%\ppx\lua\git_checkout.lua" %'myrepo' %si"oBranch" %&
                          *setcust oBranch
                          *jumppath -savelocate
&B:checkout -b branch   = *string o,nb=%*input(-title:"git checkout -b.." -mode:e)
                          *execute %n,git checkout -b %so"nb"
                          *if !%*RESULT(myrepo) %: *setcust _User:u_git_branch=%so"nb"
                          *ifmatch !0,0%si"oBranch" %: *string i,oBranch=%so"nb" %: node %'myrepo'%\nodejs\ppx\git_getlog.js 0 1 0 %si"gm"
-- =
&M:mv -k %%#FC          = %Ora git mv -k %#FC %*regexp("%*input("%FD" -title:"git mv <送り先の選択>" -mode:e -k *editmode d %%: *completelist /file:%'list'%\GITREPOSITORIES.TXT)","s/\\/\//g") %&
                          *ifmatch !0,0%si"oBranch" %: *script %'scr'%\gitChangeState.js,1,1
&R:mv "%%R"             = *string i,rename=%*input("%*extract(C"%%Y.%%t")" -title:"git mv <名前の変更>" -mode:Ec -select:fs -k *script %'scr'%\selStr.js,"(.*\/(?!$)(.*))")
                          %Oa git mv "%R" %si"rename" %&
                          *ifmatch !0,0%si"oBranch" %: *js "PPx.EntryState=1; PPx.EntryInsert(PPx.EntryIndex+1,""%si"rename""")";"
&D:rm -f (-r) %%#FC     = *string o,delFile=%#FC
                          %"git rm <削除>" %Q"%*regexp("%so"delFile"","s/\s/\n/g")" %: *ifmatch %*js(PPx.Result=PPx.DirectoryType)"),:DIR %: git rm -f -r %so"delFile" %& *js "PPx.EntryState=1;" %: *stop
                          git rm -f %so"delFile" %& *js "PPx.EntryState=1;"
&D:rm --cached (-r) %%#FC = *string o,delFile=%#FC
                            %"git rm cached <キャッシュ削除>" %Q"%*regexp("%so"delFile"","s/\s/\n/g") %: git rm --cached -r %so"delFile" %&
                            *ifmatch !0,0%si"oBranch" %: *script %'scr'%\gitChangeState.js,2,2
-- =
&T:tig        = tig
&V:vim&Diff   = gvim "+Gitdiff %*input("HEAD^" -title:":Gitdiff コミットの選択" -mode:e -k *string e,path=%R ) %R" %R
}
-|M_CgitSub =
M_CgitSub = {
&C:commit -F _EDITMSG         = %K"@^s
                                *string o,gr=%*extract(C%*getcust(_User:g_ppcid)"%%si""gr""")
                                *ifmatch 0,0%so"gr" %: *string o,gr=%'myrepo'
                                *cd %so"gr"
                                %Oa *run -wait:idle git commit -F %se"filename" --cleanup=strip %: *wait %&
                                @git log -n1 %&
                                *focus #%*NT
                                *ifmatch !0,0%*extract(C"%%si""oBranch""") %: node %'myrepo'%\nodejs\ppx\git_getlog.js 1 1 1 status
&A:commit --amend -F _EDITMSG = %K"@^s
                                *string o,gr=%*extract(C%*getcust(_User:g_ppcid)"%%si""gr""")
                                *ifmatch 0,0%so"gr" %: *string o,gr=%'myrepo'
                                *cd %so"gr"
                                %Oa *run -wait:idle git commit --amend -F %se"filename" --cleanup=strip %: *wait %&
                                @git log -n1 %&
                                *focus #%*NT
                                *ifmatch !0,0%*extract(C"%%si""oBranch""") %: node %'myrepo'%\nodejs\ppx\git_getlog.js 1 1 1 status
}
;---------------------------------------------------------------------------
;**リネーム
;---------------------------------------------------------------------------
-|M_FileRename  =
M_FileRename = {
&Swap!      = *script %'scr'%\renameSwap.js
-- =
; &Allrename  = %Oi %0..\allrename\allrename.exe /file
;               %K"null"
;               *autodragdrop "AllRename"
&PPffix     = *ppffix -ppc %#FDC
}
;---------------------------------------------------------------------------
;**移動
;---------------------------------------------------------------------------
-|M_FileMOVE  =
M_FileMOVE  = {
移動(&M)          = *script %'scr'%\cmdMove.js,1
一つ上に移動(&U)  = *ppcfile !move,..\,-min -qstart -nocount -same:5 -log:off -compcmd %K"@PAUSE"
ディレクトリにまとめる(&K)  = *ppcfile !move,"%FDN\%"ディレクトリ名"%{%*nowdatetime("ND_HU")%}",/min /qstart /nocount /log:off
;;/querycreatedirectory:off
-- =
詳細設定(&D)      = *script %'scr'%\cmdMove.js
}
;---------------------------------------------------------------------------
;**コピー
;---------------------------------------------------------------------------
-|M_FileCOPY =
M_FileCOPY = {
コピー(&C)              = *script %'scr'%\cmdCopy.js,1
同DIRリネームコピー(&R) = *ppcfile !Copy,"%1",/qstart /min /nocount /preventsleep /same:5 /log:off
シンボリックリンク(&L)  = *script %'scr'%\cmdCopy.js,2
-- =
詳細設定(&D)            = *script %'scr'%\cmdCopy.js,0
; -- =
; クラウド(&S)            = ?M_Cauxmenu
}
;---------------------------------------------------------------------------
;** バイナリ閲覧
;---------------------------------------------------------------------------
-|M_bin =
M_bin = { ** comment **
&Diff     = *if 2==%*js(PPx.Result = PPx.EntryMarkCount;) %: %'mergetool' %#FDC %: *stop
            *if 0%*js(PPx.Result = PPx.Entry.Highlight;) %: %'mergetool' "%R" "%~FDN\%R" %: *stop
            %'mergetool' "%R" "%~FDCN"
&FC       = *if 2==%*js(PPx.Result = PPx.EntryMarkCount;) == 2 %: FC /b %#FDC %: *stop
            FC /b %FDC "%~FDCN"
--        =
&Hex dump = *ppv "%C" -r -hex
}
;---------------------------------------------------------------------------
;** 解凍
;---------------------------------------------------------------------------
-|M_xunpack =
M_xunpack = {
ここに解凍(&U)      = *unpack %& *POSTMARK 5
--  =
ワークスペース(&W)  = *unpack %'work' %& *POSTMARK 5
反対窓に解凍(&O)    = *ifmatch "64;96",%*js(PPx.Result = PPx.DirectoryType;) %: %u7-zip64.dll,e %FD -i%@ -aos "-o%~FDN" %: *POSTMARK 5 %: *stop
                      %u7-zip64.dll,x -aos -an -ai%@ "-o%~FDN" %: *POSTMARK 5
--  =
画像抽出(&P)        = %u7-zip64.dll,e -aos -an -ai%@ "-o%*RESULT(getpath)*" *.jpg *.jpeg *.bmp *.png *.gif %: *POSTMARK 5
音楽抽出(&M)        = %u7-zip64.dll,e -aos -an -ai%@ "-o%*RESULT(getpath)*" *.mp3 *.mid *.wav *.ogg %: *POSTMARK 5
--  =
閲覧(&L)            = reces /mL7-zip64.dll %R %: %K"@^TAB
完全性テスト(&T)    = reces /mt7-zip64.dll %R %: %K"@^TAB
; 完全性テスト(&T)    = %u7-zip64.dll,t %R
}
;---------------------------------------------------------------------------
;** 圧縮
;---------------------------------------------------------------------------
-|M_xpack =
M_xpack = {
zi&p method5    = *if 1>=%*js(PPx.Result=PPx.EntryMarkCount;) %: %u7-zip64.dll,u -tzip -mx=5 -hide "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" "%FCN%S"\"" %: *POSTMARK 5 %: *stop -n
                  %u7-zip64.dll,u -tzip -mx=5 "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" %@FCB %: *POSTMARK 5
zip &NoComp     = *if 1>=%*js(PPx.Result=PPx.EntryMarkCount;) %:  %u7-zip64.dll,u -tzip -mx=0 -hide "%*input("%*RESULT(getpath)%|%~X%|.zip" -mode:Ec -select:i)" "%FCN%S"\"" %: *POSTMARK 5 %: *stop -n
                  %u7-zip64.dll,u -tzip -mx=0 -hide "%*input("%*RESULT(getpath)%|%~X%|.zip" -mode:Ec -select:i)" %@FCB %: *POSTMARK 5
&zip(PASS付き)  = %u7-zip64.dll,u -tzip -mx=5 -p -mem=AES256 -hide "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" %@FCB
-- =
&7z             = %u7-zip64.dll,u "%*input("%*RESULT(getpath)%|%X%|.7z" -mode:Ec -select:i)" %@FCB %S"-r"
&7z(PASS付き)   = %u7-zip64.dll,u -p "%*input("%*RESULT(getpath)%|%X%|.7z" -title:"パス付き書庫の名前" -mode:Ec -select:i)" %@FCB
&Cab            = %uCAB32.dll,-a -r "%*input("%*RESULT(getpath)%|%X%|.cab" -mode:Ec -select:i)" %@FCB
--  =
追加圧縮(&A)    = %"追加圧縮"%Q"階層内への追加は未対応" %: %u7-zip64.dll,u %*regexp("%~FDC","s/^(.*\\.*?(7z|zip)).*/$1/") %@FCB %S"-r"
--  =
基底DIR除去(&D) = *ppb -c reces /mrzip /l0 /eb /t /of%{%FX_%} /d2 %FDCB
; 最適化圧縮(&O)  = %ORs *ifmatch %*RESULT(filetype),DIR %: %0..\Ralpha\Ralpha.exe /ini=convJPG%"連番初期値の設定 0 or 1"%{0%}.ini %FDC %: *ppb -c reces /mc /of"%*input("%*RESULT(getpath)%|%Y%|.zip" -title:"無圧縮書庫の名前" -mode:Ec -select:i)" /eb /l0 %'work'%\_%FC %: *stop
;                   *ifmatch %*RESULT(filetype),PKZIP %: *ppb -c reces /{"optPACK.cfg" %FDCB %: *stop
;                   *linemessage !"select "DIR" or "ZIP"
; RalphaCFG作成(&M)  = reces /mrzip /l0 /e /t /r"C:\bin\Ralpha\Ralpha.exe /ini=optPACK.ini ."  /}"optPACK.cfg" :
}
;---------------------------------------------------------------------------
;** PPv
;---------------------------------------------------------------------------
-|M_ppvc  =
M_ppvc  = { ; PPvコンテキスト追加分
;開く =*ppv -r %*selecttext()
;-- =
; PPcで実行   = *execute C,%*selecttext()
ファイル内検索  = %k"%*selecttext()
                  %K"@^F
--  =
背景明度(&B)  = *string o,bri=X_bg:B_%n
                *customize %so"bri"=%*input("%*getcust(%so"bri")" -title:"明度の設定" -mode:n)
--  =
&Ecosia      = *launch %'browser' https://www.ecosia.org/search?q=%*selecttext(u)
&nifty辞書   = *ppv -bootid:Y -tag:on -css:off -script:off http://dictionary.nifty.com/search/result?q=%*selecttext(u)&t=0&r=ejje
}
;---------------------------------------------------------------------------
;・一行編集コンテキストメニュー
;---------------------------------------------------------------------------
-|M_editci  =
M_editci  = {
ファイルメニュー(&F)\tCtrl+]  = %k"^']'
編集メニュー(&M)\tCtrl+Q      = %k"^Q
設定メニュー(&S)\tShift+F2    = %k"\F2
--  =
変数一覧(&@)          = *script %'scr'%\var.js
--  =
エントリ読み込み(&R)  = *replacefile %*extract(C"%%FDC")
                        *setcaption %*extract(C"%%FC")
-- =
コミットテンプレ(&C)  = *string o,fn=%se"filename"
                        *replacefile %'list'%\git\commit_template
                        *string e,filename=%so"fn"
編集テンプレ(&E)      = *replacefile %'cfg'%\TPL_Pxx.cfg
                        *setcaption TPL_Pxx.cfg
コマンド追加(&A)      = *setcust M_editCadd:%*input(-title:"コマンド名の登録")=%*RESULT(shapecode)
                        %On *ppcust CD %'cfg'\@add_command.cfg -mask:M_editCadd
コマンド削除(&D)      = *deletecust "M_editCadd"
-- =
addCMD                = ??M_editCadd
;元の編集メニュー(&B)\tShift+F10  = *defaultmenu
;選択ファイル名\tCtrl+N   = %k"^N
;選択ファイルパス\tCtrl+P = %k"^P
;選択ファイル(拡張子無)\tCtrl+E = %k"^E
;選択ファイル拡張子\tCtrl+T = %k"^T
;カーソルファイル\tCtrl+R = %k"^R
;PPxパス\tCtrl+0    = %k"^0
;カレントパス\tCtrl+1   = %k"^1
;反対窓パス\tCtrl+2   = %k"^2
}
-|M_editc   =
M_editc     = { ; 一行編集コンテキストメニュー
大文字/小文字(&W)\tCtrl+Q-U     = %k"^QU
全角/半角(&Z)\tCtrl+K-Z         = %k"^KZ
-- =
反対窓カーソルファイル名(&Y)    = *insert "%~Y"
mode                            =
-- =
お気に入り(&O)\tCtrl+Shift+P    = %k"^\P
PPcのパス(&L)\tCtrl+Shift+L     = %k"^\L
ディレクトリ(&D)\tCtrl+Shift+D  = %k"^\D
ファイル(&I)\tCtrl+Shift+I      = %k"^\I
|| =
&g 汎用            = *editmode g
&h コマンド        = *editmode h
&f フルパス        = *editmode f
&d ディレクトリ    = *editmode d
&c ファイル        = *editmode c
&x PPv履歴         = *editmode x
&m マスク          = *editmode m
&8 キーリスト      = *setcaption キーの検索
                     *completelist /file:%0PPXUKEYS.TXT
                     *editmode e
&9 GIT             = *completelist /set /file:%'list'%\GITCOMMAND.TXT
                     *editmode e
&0 コミット        = *run -noppb -pos:%*windowrect(,l),%*windowrect(,b) ppbw -c nyagos -c mode 80,15&lua_f "%'myrepo'%\ppx\lua\git_commit.lua" %& *insert %si"select_commit" %: *string i,select_commit=
;数値(&n)           = *editmode n
;検索(&s)           = *editmode s
--                 =
&e 使用しない      = *editmode e
}
-|M_editcSub =
M_editcSub = {
カーソルファイル(&R)\tCtrl+R    = %k"&R
選択ファイル名(&X)\tCtrl+E      = %k"&X
選択ファイル拡張子(&T)\tCtrl+T  = %k"&T
選択ファイルパス(&P)\tAlt+P     = %k"&P
}
-|M_editcSubRename =
M_editcSubRename = {
前に追加(&F)    = *replace :%*edittext()%%C
                  *script %'scr'%\selStr.js,"(\:(.*))%%C"
後ろに追加(&B)  = *replace :%%X%*edittext().%%T
                  *script %'scr'%\selStr.js,"(\:%%X(.*))\.%%T"
置換(&R)        = *linemessage s/対象文字/置換文字/[g][I]   ※:%%展開をOFF
                  *replace s/%*edittext()//
                  *script %'scr'%\selStr.js,"(s\/(.*))\/\/"
連番(&N)        = *linemessage [\]=連番マクロ
                  *replace :%*edittext()\.%%T
                  *script %'scr'%\selStr.js,"(\:(.*))\\\.%%T"
数字桁揃え(&S)  = *string o,digit=%*input("3" -title:"桁数" -mode:e)
                  *replace ":%*edittext()%%*padding(%%*regexp(""""%%FXN"""",""""s/\D*(\d*)/\1/""""),%so"digit",0).%%T"
                  *script %'scr'%\selStr.js,"(\:(.*))%%\*padding.*"
拡張子一括(&E)  = *replace :%%X.%T
                  *script %'scr'%\selStr.js,"(.*%%X\.(.*))"
}
;初期値
;元に戻す(&U)\tCtrl+Z = %k"^Z
;-- = 
;切り取り(&T)\tCtrl+X = %k"^X
;コピー(&C)\tCtrl+C = %k"^C
;貼り付け(&P)\tCtrl+V = %k"^V
;削除(&D)\tDelete = %k"DEL
;-- = 
;全て選択(&A)\tCtrl+A = %k"^A
;|| = 
;元の編集メニュー(&B)\tShift+F10  = *defaultmenu
;ファイルメニュー(&F)\tCtrl+] = %k"^']'
;編集メニュー(&M)\tCtrl+Q = %k"^Q
;設定メニュー(&S)\tShift+F2 = %k"\F2
;-- = 
;大-小文字変換(&W)\tCtrl+Q-U  = %k"^QU
;全-半角変換(&Z)\tCtrl+K-Z  = %k"^KZ
;管理者として実行(&R)\tESC-R  = %k"^']' R
;|| = 
;行番号(&J)\tCtrl+Q-J = %k"^QJ
;検索(&F)\tCtrl+F = %k"^F
;-- = 
;お気に入り(&N)\tCtrl+Shift+P = %k"^\P
;PPcのパス(&L)\tCtrl+Shift+L  = %k"^\L
;ディレクトリ(&O)\tCtrl+Shift+D = %k"^\D
;ファイル(&G)\tCtrl+Shift+I = %k"^\I
;パス挿入(&I) = %M_editci
